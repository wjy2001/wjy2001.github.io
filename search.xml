<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MongoDB逻辑操作符$or, $and,$not,$nor</title>
      <link href="/2021/11/23/MongoDB%E9%80%BB%E8%BE%91%E6%93%8D%E4%BD%9C%E7%AC%A6$or,%20$and,$not,$nor/"/>
      <url>/2021/11/23/MongoDB%E9%80%BB%E8%BE%91%E6%93%8D%E4%BD%9C%E7%AC%A6$or,%20$and,$not,$nor/</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB逻辑操作符-or-and-not-nor"><a href="#MongoDB逻辑操作符-or-and-not-nor" class="headerlink" title="MongoDB逻辑操作符$or, $and,$not,$nor"></a>MongoDB逻辑操作符$or, $and,$not,$nor</h1><h2 id="or"><a href="#or" class="headerlink" title="$or"></a>$or</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">$match</span>: &#123; <span class="attr">$or</span>: [&#123; <span class="attr">name</span>: &#123; <span class="attr">$regex</span>: params.str &#125; &#125;, &#123; <span class="attr">class</span>: &#123; <span class="attr">$regex</span>: params.str &#125; &#125;, &#123; <span class="attr">studentId</span>: &#123; <span class="attr">$regex</span>: params.str &#125; &#125;] &#125; &#125;,</span><br></pre></td></tr></table></figure><p>是一个逻辑or操作符操作在一个数据或者多个表达式并且需要选择至少一个满足条件的表达式，$or有至少以下表达式：</p><p>{ $or: [ { <expression1> }, { <expression2> }, … , { <expressionN> } ] }<br>考虑下面的例子：</p><p>db.inventory.find( { $or: [ { quantity: { $lt: 20 } }, { price: 10 } ] } )<br>上面的例子会查询集合inventory中所有字段quantity小于20或者price等于10的所有文档。</p><p>使用$or条件评估条款，MongoDB会扫描整个文档集合，如果所有的条件支持索引，MongoDB进行索引扫描，因此MongoDB使用索引执行$or表达式，$or中的所有表达式必须支持索引，否则的话MongoDB就会扫描整个集合。</p><p>当使用$or查询并且使用索引时，每个$or的条件表达式都可以使用自己的索引，考虑下面的查询：</p><p>db.inventory.find( { $or: [ { quantity: { $lt: 20 } }, { price: 10 } ] } )<br>支持上面的查询你不需要创建一个符合索引，而是在字段quantity上创建一个索引，在price上创建一个索引。<br>db.inventory.createIndex( { quantity: 1 } )<br>db.inventory.createIndex( { price: 1 } )<br>$or和sort()操作<br>当使用$or执行sort()查询时，MongoDB可以使用支持$or查询条件的索引。之前的版本不支持索引。</p><h2 id="or与-in"><a href="#or与-in" class="headerlink" title="$or与$in"></a>$or与$in</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">$match</span>: &#123; <span class="attr">role</span>: &#123; <span class="attr">$in</span>: IDs &#125; &#125; &#125;,</span><br></pre></td></tr></table></figure><p>使用$or操作比较字段的值是否等于某个值时可以使用$in替换$or操作；例如查询集合inventory中字段quantity的值等于20或者50的所有文档，使用$in操作：</p><p>db.inventory.find ( { quantity: { $in: [20, 50] } } )</p><p>$and逻辑表达式</p><p>语法：{ $and: [ { <expression1> }, { <expression2> } , … , {<expressionN> } ] }</p><p>$and执行一个逻辑and操作在一个或者多个表达式上，并且查询数组中指定的所有表达式指定的文档document,$and使用短路求值，如果第一个表达式的结果是false，MongoDB将不会执行剩余的表达式；</p><p>例如：and查询指定同一个字段的多个查询条件</p><p>db.inventory.find( { $and: [ { price: { $ne: 1.99 } }, { price: { $exists: true } } ] } )<br>这个查询会选择集合inventory中的所有文档，条件是price不等于1.99并且price字段存在；<br>以上查询还可以使用隐式AND操作，如下：</p><p>db.inventory.find( { price: { $ne: 1.99, $exists: true } } )<br>AND查询使用多个表达式指定相同的操作：</p><p>db.inventory.find( {<br>    $and : [<br>        { $or : [ { price : 0.99 }, { price : 1.99 } ] },<br>        { $or : [ { sale : true }, { qty : { $lt : 20 } } ] }<br>    ]<br>} )<br>以上字段将会查询price字段值等于0.99或1.99并且sale字段值为true或者qty小于20的所有文档；<br>使用隐式AND操作无法构建此查询，因为它不止一次使用$or操作；</p><h2 id="not"><a href="#not" class="headerlink" title="$not"></a>$not</h2><p>语法： { field: { $not: { <operator-expression> } } }</p><p>$not执行一个逻辑not操作在指定的表达式并查询到不匹配表达式的文档，这包含不包括字段的文档；</p><p>考虑如下操作：</p><p>db.inventory.find( { price: { $not: { $gt: 1.99 } } } )<br>此查询将会查询inventory集合中的文档，条件如下： price字段小于等于1.99或者price不存在。<br>{ $not: { $gt: 1.99 } } 不同于$lte操作，{ $lte: 1.99 }操作只会返回price字段存在并且小于等于1.99的字段。</p><p>记住$not操作符只会影响其他操作符不能独立检查字段和文档，因此使用$not做逻辑析取和$ne操作测试字段内容；</p><p>使用$not操作时考虑如下操作：</p><p>操作$not操作符和其它操作符一致但是会产生一些意想不到的结果，比如数组之类的数据类型；</p><p>$not操作符不支持$regex正则表达式操作，使用//或者你的驱动接口代替，使用语言的正则表达式功能创建正则表达式对象；</p><p>考虑下面的例子使用模式匹配//:</p><p>db.inventory.find( { item: { $not: /^p.*/ } } )</p><p>此查询将会查询inventory集合中item字段不是以p开头的所有文档；</p><h2 id="nor"><a href="#nor" class="headerlink" title="$nor"></a>$nor</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">$match</span>: &#123; <span class="attr">$nor</span>: [&#123; <span class="string">&quot;weeklyreport.submissionWeek&quot;</span>: &#123; <span class="attr">$gte</span>: params.week &#125; &#125;] &#125; &#125;,</span><br></pre></td></tr></table></figure><p>{ $nor: [ { <expression1> }, { <expression2> }, …  { <expressionN> } ] }<br>考虑如下操作：</p><p>db.inventory.find( { $nor: [ { price: 1.99 }, { sale: true } ]  } )<br>查询返回所有的文档，条件是：</p><p>包含字段price值不等于1.99，包含字段sale值不等于true,或者包含字段price值不等于1.99，不包含字段sale；或者不包含字段price,包含字段sale值不等于true;或者不包含字段price，不包含字段sale;</p><p>$nor额外比较</p><p>考虑入校操作：</p><p>db.inventory.find( { $nor: [ { price: 1.99 }, { qty: { $lt: 20 } }, { sale: true } ] }<br>inventory集合查询所有的文档，条件如下：<br>字段price不等于1.99，字段qty不小于20，字段sale不等于true;查询的结果包含不存在的字段；</p>]]></content>
      
      
      <categories>
          
          <category> mongo聚合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang中BSON的使用方法</title>
      <link href="/2021/11/19/golang%E4%B8%ADBSON%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2021/11/19/golang%E4%B8%ADBSON%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="golang中BSON的使用方法"><a href="#golang中BSON的使用方法" class="headerlink" title="golang中BSON的使用方法"></a>golang中BSON的使用方法</h1><p>关于mongodb-go-driver这个包里面的BSOM</p><p>bson是一种类似json的二进制存储形式，它就是mongodb的存储结构，它的数据结构要比json多，如 int, long, date, floating point, and decimal128。<br> <span id="more"></span><br>我在mongodb官网找到一个blog里面也写了我用的go的mongodb拓展中bson的介绍( <a href="https://www.oschina.net/action/GoToLink?url=https://www.mongodb.com/blog/post/mongodb-go-driver-tutorial">https://www.mongodb.com/blog/post/mongodb-go-driver-tutorial</a> ),他是这样写的。</p><p> The Go Driver has two families of types for representing BSON data: The <code>D</code> types and the <code>Raw</code> types.</p><p>The <code>D</code> family of types is used to concisely build BSON objects using native Go types. This can be particularly useful for constructing commands passed to MongoDB. The <code>D</code> family consists of four types:</p><ul><li><code>D</code>: A BSON document. This type should be used in situations where order matters, such as MongoDB commands.</li><li><code>M</code>: An unordered map. It is the same as <code>D</code>, except it does not preserve order.</li><li><code>A</code>: A BSON array.</li><li><code>E</code>: A single element inside a <code>D</code>.</li></ul><p>The <code>Raw</code> family of types is used for validating a slice of bytes. You can also retrieve single elements from Raw types using a <a href="https://www.oschina.net/action/GoToLink?url=https://godoc.org/go.mongodb.org/mongo-driver/bson%23Raw.Lookup"><code>Lookup()</code></a>. This is useful if you don’t want the overhead of having to unmarshall the BSON into another type. </p><p>大概意思是：这个mongodb GO版的拓展有两种族来使用bosn数据，一个D还有一个是RAW。</p><p>D族是使用原生GO的形式来简单的构造一个BSON对象。这个对于使用命令来操作mongodb是十分有用的。D()由下面4种类型：</p><p>D:一个BSON文档，这个类型应该被用在顺序比较重要的场合（言外之意就是有序的），比如说mongodb的命令。</p><p>M:一个无序的map。它除了无序之外和D是一样的（可以理解为map和bson是可以转换）。</p><p>A:一个BSON形式的数组。</p><p>E:一个D里面的单独元素。(就是文档里的一个元素)</p><p>RAW族是被用来判断是否为bytes的一个slice。你也可以用look up()方法从RAW取得一个元素。这可以在你将BSON转化为另一个形式的数据时是十分有用的(原文大概意思是可以节省你转化数据时的开销)。</p><p>下面简单说下在操作D族时会有使用到一些条件参数。</p><p>不等于!=($ne)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.Find(bson.M&#123;&quot;name&quot;: bson.M&#123;&quot;$ne&quot;: &quot;Tom&quot;&#125;&#125;).All(&amp;users)</span><br></pre></td></tr></table></figure><p>大于&gt;($gt)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.Find(bson.M&#123;&quot;age&quot;: bson.M&#123;&quot;$gt&quot;: 10&#125;&#125;).All(&amp;users)</span><br></pre></td></tr></table></figure><p>小于&lt;($lt)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.Find(bson.M&#123;&quot;age&quot;: bson.M&#123;&quot;$lt&quot;: 10&#125;&#125;).All(&amp;users)</span><br></pre></td></tr></table></figure><p>大于等于&gt;=($gte)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.Find(bson.M&#123;&quot;age&quot;: bson.M&#123;&quot;$gte&quot;: 10&#125;&#125;).All(&amp;users)</span><br></pre></td></tr></table></figure><p>小于等于&lt;=($lte)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.Find(bson.M&#123;&quot;age&quot;: bson.M&#123;&quot;$lte&quot;: 10&#125;&#125;).All(&amp;users)</span><br></pre></td></tr></table></figure><p>in($in)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.Find(bson.M&#123;&quot;name&quot;: bson.M&#123;&quot;$in&quot;: []string&#123;&quot;Tom&quot;, &quot;Jerry&quot;&#125;&#125;&#125;).All(&amp;users)</span><br></pre></td></tr></table></figure><p>no in(nin)同<em>n<strong>i</strong>n</em>)同in</p><p>是否包含这个键($exists)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.Find(bson.M&#123;&quot;name&quot;: bson.M&#123;&quot;$exists&quot;: true&#125;&#125;).All(&amp;users)</span><br></pre></td></tr></table></figure><p>查询键值为null的字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.Find(bson.M&#123;&quot;name&quot;: bson.M&#123;&quot;$in&quot;:[]interface&#123;&#125;&#123;null&#125;, &quot;$exists&quot;: true&#125;&#125;).All(&amp;users)</span><br></pre></td></tr></table></figure><p>正则匹配($regex)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.Find(bson.M&#123;&quot;name&quot;: bson.M&#123;&quot;$regex&quot;: &quot;^[0-9]+&quot;&#125;&#125;).All(&amp;users)</span><br></pre></td></tr></table></figure><p>$all查询所有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.Find(bson.M&#123;&quot;name&quot;: bson.M&#123;&quot;$all&quot;: []int&#123;10,11,12&#125;&#125;&#125;).All(&amp;users</span><br></pre></td></tr></table></figure><p>$or</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.Find(bson.M&#123;&quot;$or&quot;: []bson.M&#123;bson.M&#123;&quot;age&quot;: 11&#125;, bson.M&#123;&quot;sex&quot;: 1&#125;&#125;&#125;).All(&amp;users)</span><br></pre></td></tr></table></figure><p>修改$set</p><p>增加值$incr</p><p>向数组增加一个元素$push</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">filter := bson.D&#123;&#123;&quot;name&quot;, &quot;Speike&quot;&#125;&#125;</span><br><span class="line"></span><br><span class="line">update := bson.D&#123;</span><br><span class="line">   &#123;&quot;$push&quot;, bson.D&#123;</span><br><span class="line">      &#123;&quot;interests&quot;, &quot;sing&quot;&#125;,</span><br><span class="line">   &#125;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">updateResult, err := collection.UpdateOne(context.TODO(), filter, update)</span><br></pre></td></tr></table></figure><p>移除数组一个元素$pull</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">filter := bson.D&#123;&#123;&quot;name&quot;, &quot;Speike&quot;&#125;&#125;</span><br><span class="line"></span><br><span class="line">update := bson.D&#123;</span><br><span class="line">   &#123;&quot;$pull&quot;, bson.D&#123;</span><br><span class="line">      &#123;&quot;interests&quot;, &quot;sing&quot;&#125;,</span><br><span class="line">   &#125;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">updateResult, err := collection.UpdateOne(context.TODO(), filter, update)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL（软件系统）总结</title>
      <link href="/2021/11/19/MySQL(%E7%AC%94%E8%AE%B0)/"/>
      <url>/2021/11/19/MySQL(%E7%AC%94%E8%AE%B0)/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL（软件系统）总结"><a href="#MySQL（软件系统）总结" class="headerlink" title="MySQL（软件系统）总结"></a>MySQL（软件系统）总结</h1><h2 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h2><p>MySQL是C/S架构的软件</p><p>软件的架构有：B/S、C/S</p><p>——B/S：B:浏览器，S:服务器（网页上直接能运行，如京东，淘宝）</p><p>——C/S：C:客户端，S:服务器（需要安装或下载客户端的软件）<br> <span id="more"></span></p><h3 id="数据库的基本分类"><a href="#数据库的基本分类" class="headerlink" title="数据库的基本分类"></a>数据库的基本分类</h3><p>关系型数据库：MySQL、Oracle、DB2……</p><p>非关系型数据库：Mongo dB、Redis……</p><h3 id="SQL脚本"><a href="#SQL脚本" class="headerlink" title="SQL脚本"></a>SQL脚本</h3><p>1、一堆SQL代码，后缀为.sql的文件</p><p>DB、DBMS、SQL</p><p>DB： Database 数据库</p><p>​        主要是表，表是数据库基本组成单元</p><p>DBMS： Database Management System，数据库管理系统</p><p>SQL：结构化查询语言，标准的关系型数据库语言</p><p>三者的关系：DBMS—执行–&gt;SQL–操作–&gt;DB</p><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><p>（1）行：记录/数据，存储一条完整的信息</p><p>​        —-数据</p><p>​        —-数据类型</p><p>​        —-数据约束</p><p>（2）列：列名，存储列的相关信息</p><h3 id="SQL，操作或控制数据库（DB）"><a href="#SQL，操作或控制数据库（DB）" class="headerlink" title="SQL，操作或控制数据库（DB）"></a>SQL，操作或控制数据库（DB）</h3><p>​        —-DQL（数据查询语言）：主要是对SELECT操作的支持</p><p>​        —-DML（数据操作语言）：数据库对增（INSERT）删（DELETE）改（UPDATE）</p><p>​        —-TCL（事务控制语言）：提交（COMMIT）回滚（ROLLBACK）</p><p>​        —-DCL（数据控制语言）：授权（GRANT）等</p><p>​        —-DDL（数据定义语言）：创建（CREATE）删除（DROP）修改（ALTER）等支持</p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>SELECT————-查询</p><p>FROM—————来自</p><p>DISTINCT———-去除重复（行）</p><h3 id="子句的概念"><a href="#子句的概念" class="headerlink" title="子句的概念"></a>子句的概念</h3><p>​        关键字+后面写的代码</p><h3 id="子句的作用"><a href="#子句的作用" class="headerlink" title="子句的作用"></a>子句的作用</h3><p>SELECT子句：控制列的显示，有的时候也可称之为“数据投影”</p><p>FROM子句：确定数据的来源</p><h3 id="子句的书写顺序"><a href="#子句的书写顺序" class="headerlink" title="子句的书写顺序"></a>子句的书写顺序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>……<span class="keyword">FROM</span>……</span><br></pre></td></tr></table></figure><h3 id="子句的执行顺序"><a href="#子句的执行顺序" class="headerlink" title="子句的执行顺序"></a>子句的执行顺序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span>……<span class="keyword">SELECT</span>……</span><br></pre></td></tr></table></figure><h3 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h3><p>显示所有</p><p>​        面试题</p><p>​            问题：使用*号好还是使用所有列名好？——-要能自圆其说</p><p>​            目的：二者谁的执行效率高？———————列名</p><p>四则运算</p><p>​        注意空值参与运算    如果没有处理，结果一定是空值</p><p>别名的使用</p><p>​        表名+空格+表别名</p><p>数据排序（新的子句）</p><p>​        关键字：ORDER BY</p><p>​        子句：ORDER BY 子句</p><p>​        子句的作用：按指定的列或者多个列进行排序</p><p>​        子句的书写顺序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT……FROM……ORDER BY……</span><br></pre></td></tr></table></figure><p>​        子句执行顺序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM……SELECT……ORDER BY……</span><br></pre></td></tr></table></figure><p>​        注意：排序</p><p>​            数字，字典……</p><p>​            升序、降序</p><p>​                升序：ASC</p><p>​                降序：DESC</p><p>​        面试题：</p><p>​            （1）可以使用列别名排序吗？——可以</p><p><img src="C:\Users\王均易\AppData\Roaming\Typora\typora-user-images\image-20210102140918977.png" alt="image-20210102140918977"></p><p>​            （2）可以使用序号排序吗？———可以</p><p><img src="C:\Users\王均易\AppData\Roaming\Typora\typora-user-images\image-20210102140841660.png" alt="image-20210102140841660"></p><h3 id="命令和关键字的区别"><a href="#命令和关键字的区别" class="headerlink" title="命令和关键字的区别"></a>命令和关键字的区别</h3><p>功能作用：</p><p>​    DESC：作为关键字是降序，作为命令是查询表结构。</p><p>是否可以缩写：</p><p>​    命令是可以缩写的，如：DESC全命令是DESCRIBE</p><p>​    关键字是不能缩写的</p><h1 id="增删改-DML操作"><a href="#增删改-DML操作" class="headerlink" title="增删改(DML操作)"></a>增删改(DML操作)</h1><h2 id="增-INSERT"><a href="#增-INSERT" class="headerlink" title="增(INSERT)"></a>增(INSERT)</h2><p>关键字：INSERT INTO,VALUES</p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><h3 id="增加表列"><a href="#增加表列" class="headerlink" title="增加表列"></a>增加表列</h3><h3 id="增加数据-INSERT-INTO"><a href="#增加数据-INSERT-INTO" class="headerlink" title="增加数据(INSERT INTO)"></a>增加数据(INSERT INTO)</h3><p>方法一：列名与value一一对应，能自定义列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名(列名1,列名2,列名3……)</span><br><span class="line">VALUES(values1,values2,values3……)</span><br></pre></td></tr></table></figure><p>方法二：省略列名但，需要按表中列的顺序一一写上数据，不能少</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名</span><br><span class="line">VALUES(values1,values2,values3……);</span><br></pre></td></tr></table></figure><h2 id="删-DELETE"><a href="#删-DELETE" class="headerlink" title="删(DELETE)"></a>删(DELETE)</h2><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><h3 id="删除表列"><a href="#删除表列" class="headerlink" title="删除表列"></a>删除表列</h3><h3 id="删除数据-危险操作-带上条件"><a href="#删除数据-危险操作-带上条件" class="headerlink" title="删除数据[危险操作-带上条件]"></a>删除数据[危险操作-带上条件]</h3><p>关键字：DELETE,FROM,WHERE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM 表名 </span><br><span class="line">WHERE 条件</span><br></pre></td></tr></table></figure><blockquote><p>注意：删除操作，一定带上条件，否则删除表中所有数据</p></blockquote><h2 id="改-UPDATE"><a href="#改-UPDATE" class="headerlink" title="改(UPDATE)"></a>改(UPDATE)</h2><h3 id="修改数据库名"><a href="#修改数据库名" class="headerlink" title="修改数据库名"></a>修改数据库名</h3><h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><p>关键字：UPDATE,SET,WHERE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名</span><br><span class="line">SET column1=value1,column2=value2,...</span><br><span class="line">WHERE 条件</span><br></pre></td></tr></table></figure><blockquote><p>注意：更新操作，一定带上条件，否则更新表中所有数据</p></blockquote><h1 id="查-SELECT"><a href="#查-SELECT" class="headerlink" title="查(SELECT)"></a>查(SELECT)</h1><p>SELECT语句完整语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(7)  SELECT </span><br><span class="line">(8)  DISTINCT &lt;select_list&gt;</span><br><span class="line">(1)  FROM &lt;left_table&gt;</span><br><span class="line">(3)  &lt;join_type&gt; JOIN &lt;right_table&gt;</span><br><span class="line">(2)  ON &lt;join_condition&gt;</span><br><span class="line">(4)  WHERE &lt;where_condition&gt;</span><br><span class="line">(5)  GROUP BY &lt;group_by_list&gt;</span><br><span class="line">(6)  HAVING &lt;having_condition&gt;</span><br><span class="line">(9)  ORDER BY &lt;order_by_condition&gt;</span><br><span class="line">(10) LIMIT &lt;limit_number&gt;</span><br></pre></td></tr></table></figure><p>执行顺序</p><p>FROM—&gt;ON—&gt;JOIN—&gt;WHERE—&gt;GROUP BY—&gt;HAVING—&gt;SELECT—&gt;DISTINCT—&gt;ORDER BY—&gt;LIMIT</p><h3 id="查询表结构"><a href="#查询表结构" class="headerlink" title="查询表结构"></a>查询表结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC emp(表名)</span><br></pre></td></tr></table></figure><h3 id="无条件查询"><a href="#无条件查询" class="headerlink" title="无条件查询"></a>无条件查询</h3><p>1.查询表的全部信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT  *</span><br><span class="line">FROM 表名(表别名);</span><br></pre></td></tr></table></figure><p>2.查询表对应列的全部信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT 列名1(表别名1)、列名2(表别名2)、列名3(表别名3)……</span><br><span class="line">FROM 表名(表别名);</span><br></pre></td></tr></table></figure><p>3.无重复的查询表的全部信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT  DISTINCT *</span><br><span class="line">FROM 表名(表别名);</span><br></pre></td></tr></table></figure><p>2.无重复的查询表对应列的全部信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT 列名1(列别名1)、列名2(列别名2)、列名3(列别名3)……</span><br><span class="line">FROM 表名(列别名);</span><br></pre></td></tr></table></figure><h3 id="条件查询（WHERE）"><a href="#条件查询（WHERE）" class="headerlink" title="条件查询（WHERE）"></a>条件查询（WHERE）</h3><h4 id="1-基本语句："><a href="#1-基本语句：" class="headerlink" title="1.基本语句："></a>1.基本语句：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT……</span><br><span class="line">FROM……</span><br><span class="line">WHERE 条件</span><br></pre></td></tr></table></figure><p>关键字</p><p>​    SELECT、FROM、WHERE</p><p>子句</p><p>​    </p><p>子句的作用</p><p>子句的书写顺序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT……FROM……WHERE……</span><br></pre></td></tr></table></figure><p>子句的执行顺序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM……WHERE……SELECT……</span><br></pre></td></tr></table></figure><h4 id="基本操作符"><a href="#基本操作符" class="headerlink" title="基本操作符"></a>基本操作符</h4><p>​    基本比较运算符</p><blockquote><p>​        &lt;、&gt;、=、!=(不等于)、&lt;&gt;(不等于)、&gt;=、&lt;=</p></blockquote><p>​    基本逻辑运算符</p><p>​        能够进行多个条件的连接，这些条件之间构成一定的逻辑关系</p><blockquote><p>​        与    AND</p><p>​        或    OR</p><p>​        非    NOT</p></blockquote><p>特殊的比较运算符</p><p>​    基本空值判断</p><p>​        判断是NULL的情况：列名：列名(字段名) IS NULL;</p><p><img src="C:\Users\王均易\AppData\Roaming\Typora\typora-user-images\image-20210102145040748.png" alt="image-20210102145040748"></p><h6 id="错误情况："><a href="#错误情况：" class="headerlink" title="错误情况："></a>错误情况：</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WHERE 列名(字段名) = NULL;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\王均易\AppData\Roaming\Typora\typora-user-images\image-20210102145055883.png" alt="image-20210102145055883"></p><p>​        判断不是NULL的情况：列名：列名(字段名) IS NOT NULL;</p><h4 id="BETWEEN……AND……"><a href="#BETWEEN……AND……" class="headerlink" title="BETWEEN……AND……"></a>BETWEEN……AND……</h4><p>在value1到value2之间(包含这两个值，即[value1,value2])</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WHERE 列名(字段名) BETWEEN value1 AND value2;</span><br></pre></td></tr></table></figure><p>​            等同于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WHERE 列名(字段名) &gt;= value1 AND 列名(字段名) &lt;= value2;</span><br></pre></td></tr></table></figure><p>​        可以对日期进行比较</p><p><img src="C:\Users\王均易\AppData\Roaming\Typora\typora-user-images\image-20210102145449359.png" alt="image-20210102145449359"></p><h4 id="模糊查询（LIKE）"><a href="#模糊查询（LIKE）" class="headerlink" title="模糊查询（LIKE）"></a>模糊查询（LIKE）</h4><p>​            关键字like</p><p>​            重要的符号（通配符）：</p><blockquote><p>​                ‘_’：代表一个字符</p><p>​                ‘%’：代表的是任意个字符（包含0个）</p></blockquote><p>​            如查询倒数第二个字为A的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WHERE 列名 LIKE &#x27;%A_&#x27;;</span><br></pre></td></tr></table></figure><p><code>注意：这两个字符可以重复使用</code></p><h4 id="IN操作符"><a href="#IN操作符" class="headerlink" title="IN操作符"></a>IN操作符</h4><p>数据中不等于value1或value2……</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WHERE 列名 NOT IN (value1,value2……)</span><br></pre></td></tr></table></figure><p>数据中等于value1或value2……</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WHERE 列名 IN (value1,value2……)</span><br></pre></td></tr></table></figure><p>数据为NULL时有问题（看子查询）</p><h3 id="分页查询（LIMIT）"><a href="#分页查询（LIMIT）" class="headerlink" title="分页查询（LIMIT）"></a>分页查询（LIMIT）</h3><p>显示查询结果的前number条数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 列名</span><br><span class="line">FROM 表名</span><br><span class="line">LIMIT number;</span><br></pre></td></tr></table></figure><p>显示前指定页数的数据，size1是页数，number2是一页中的数据条数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 列名</span><br><span class="line">FROM 表名</span><br><span class="line">LIMIT size1,number2;</span><br></pre></td></tr></table></figure><h3 id="子查询（SELECT嵌套）"><a href="#子查询（SELECT嵌套）" class="headerlink" title="子查询（SELECT嵌套）"></a>子查询（SELECT嵌套）</h3><p>​    子查询顾名思义一个查询（主查询，外部查询）中包含其他查询。</p><p>​    单行子查询（简单子查询）</p><blockquote><p>子查询需要使用( )括起来</p><p>单行子查询可以使用基本比较运算符</p><p>子查询是可以脱离外部查询独立执行</p><p>子查询的书写位置</p><p>​    1.SELECT子句（罕见）</p><p>​    2.FROM子句（可以用，注意别名）</p><p>这样写会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1248 - Every derived table must have its own alias</span><br></pre></td></tr></table></figure><p>错误原因 没有给子查询出来的表起别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM (SELECT * FROM EMP WHERE DEPTNO=&#x27;20&#x27;)</span><br><span class="line">where sal&gt;1500;</span><br></pre></td></tr></table></figure><p>正确写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT temp.*</span><br><span class="line">FROM (SELECT * FROM EMP WHERE DEPTNO=&#x27;20&#x27;) temp</span><br><span class="line">where temp.sal&gt;1500;</span><br></pre></td></tr></table></figure><p>​    3.WHERE子句（常用）</p><p>​    4.HAVING子句</p></blockquote><p>​    多行子查询</p><blockquote><p>多行子查询不能使基本比较运算符</p><p>能使用</p><p>IN</p><p>NOT IN</p><p>​    注意事项：( )里如果有NULL，相当于=NULL，无结果(返回值)。</p><p>ALL：所有</p><p>ANY：任何一个</p><p>​    注意事项：使用ALL或ANY的效率比使用组函数，如MAX()和MIN()更高</p></blockquote><h3 id="多表联合查询"><a href="#多表联合查询" class="headerlink" title="多表联合查询"></a>多表联合查询</h3><p>我们需要的数据不可能都来自于一张表中</p><p>交叉连接（笛卡尔积）（CROSS JOIM）</p><blockquote><p>笛卡尔积：是指数学中两个集合的乘积</p><p>注意：多表查询的时候需要避免笛卡尔积（产生大量冗余数据）</p><p>避免方法：一定要写多表连接的连接条件</p><p>关键字：CROSS JOIM</p></blockquote><p>等值连接(必须会且熟练)(INNER JOIN……ON)</p><blockquote><p>使用不同表中的具有相同意义的字段(列)相等作为多表的连接条件</p><p>方式一：使用WHERE子句添加多表的连接条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM 表1,表2……</span><br><span class="line">WHERE 表1.列名=表2.列名</span><br></pre></td></tr></table></figure><p>方式二(通用):使用INNER JOIN……ON(等价于 JOIN……ON)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM 表1</span><br><span class="line">INNER JOIN 表2 ON (表1.列名=表2.列名);</span><br></pre></td></tr></table></figure><p>注意：1.可以使用表的别名，使用方式和列一样    </p><p>​            2.如果不同表中的字段名一致，使用的时候需要区分</p></blockquote><p>不等值连接</p><blockquote><p>等值连接以外的那部分数据</p></blockquote><p>外连接</p><blockquote><p>左外连接:主要显示的是左边表所有行的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM 表1</span><br><span class="line">LEFT JOIN 表2 ON(表1.列名=表2.列名);</span><br></pre></td></tr></table></figure><p>右外连接:主要显示的是右边表所有行的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM 表1</span><br><span class="line">RIGHT JOIN 表2 ON(表1.列名=表2.列名);</span><br></pre></td></tr></table></figure><p>全外连接(MYSQL不支持,但Oracle支持):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM 表1</span><br><span class="line">FULL JOIN 表2 ON(表1.列名=表2.列名);</span><br></pre></td></tr></table></figure></blockquote><p>自连接</p><blockquote><p>自己连接自己(表中的A列和B列实际意义相同)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT e.ENAME,e.EMPNO,m.ENAME,m.EMPNO</span><br><span class="line">FROM emp e,emp m</span><br><span class="line">WHERE e.MGR=m.EMPNO</span><br></pre></td></tr></table></figure></blockquote><h3 id="分组查询（GROUP-BY）"><a href="#分组查询（GROUP-BY）" class="headerlink" title="分组查询（GROUP BY）"></a>分组查询（GROUP BY）</h3><p>​    显然用于进行统计时5个常用函数</p><p>关键字group by（按照……分组）</p><p>子句：GROUP BY+按照分组的列名（字段名）</p><p>书写顺序：</p><p>SELECT—&gt;FROM—&gt;WHERE—&gt;GROUP BY—&gt;ORDER BY</p><blockquote><p>注意：</p><p>SELECT中可以有GROUP BY的对象</p><p>mysql（5.x版本）中执行顺序</p><p>FROM—&gt;WHERE—&gt;SELECT—&gt;GROUP BY—&gt;ORDER BY</p><p>即分组查询可以使用列别名（只限于目前）</p></blockquote><h4 id="分组条件-HAVING"><a href="#分组条件-HAVING" class="headerlink" title="分组条件(HAVING)"></a>分组条件(HAVING)</h4><p>​    关键字：HAVING</p><p>​    子句：HAVING + 分组条件</p><p>​    子句作用：添加分组条件（WHERE语句中不支持分组函数的分组条件）</p><p>​    书写顺序：SELECT—&gt;FROM—&gt;WHERE—&gt;GROUP BY—&gt;ORDER BY</p><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p>​        函数：在计算机中通常称为方法、函数</p><blockquote><p>​        函数之间可以嵌套使用</p></blockquote><p>单行函数</p><p>​    处理NULL值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IFNULL(value1, value2)</span><br></pre></td></tr></table></figure><blockquote><p>​    如果value1为NULL，则返回值为value2</p><p>​    如果value1不为NULL，则返回值为value1</p></blockquote><p>​    日期类型</p><blockquote><p>​        获取当前日期：CURDATE()</p><p>​        获取当前时间：CURTIME()</p><p>​        获取当前的日期+时间：NOW()</p><p><img src="C:\Users\王均易\AppData\Roaming\Typora\typora-user-images\image-20210102162950812.png" alt="image-20210102162950812"></p></blockquote><p>​    数值类型</p><blockquote><p>​        四舍五入：ROUND()</p><p>​        向下取整：FLOOR()</p><p>​        向上取整：CEIL()</p><p><img src="C:\Users\王均易\AppData\Roaming\Typora\typora-user-images\image-20210102162858473.png" alt="image-20210102162858473"></p><p>面试时注意负数</p><p><img src="C:\Users\王均易\AppData\Roaming\Typora\typora-user-images\image-20210102163034641.png" alt="image-20210102163034641"></p></blockquote><p>​    字符串类型</p><blockquote><p>​    字符串拼接：CONCAT(string1，string2)–将string1与string2拼接</p><p>​    字符串长度：LENGTAH(string)</p><p>​    去除前后空格：TRIM(string)</p><p>​    转成大写字母：UPPER(string)</p><p>​    转成小写字母：LOWER(string)</p></blockquote><p>多行函数（分组函数）</p><blockquote><p>​    统计数据总条数：COUNT()</p><p>注意：COUNT()括号中为数字或*</p><p>面试题：</p><p>​    给你一个陌生的数据库，有一张陌生的表，第一件事你干啥？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）SELECT * FROM 表名</span><br><span class="line">（2）SELECT COUNT(*) FORM 表名</span><br></pre></td></tr></table></figure><p>​    选（2）由于这个表的数据量可能会很大，（2）查询数据量更快</p><p>​    统计平均数：AVG()</p><p>​    统计总和：SUM()</p><p>​    统计最大值：MAX()</p><p>​    统计最小值：MIN()</p></blockquote><h2 id="DDL操作"><a href="#DDL操作" class="headerlink" title="DDL操作"></a>DDL操作</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言文件操作</title>
      <link href="/2021/11/19/C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/11/19/C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言文件操作"><a href="#C语言文件操作" class="headerlink" title="C语言文件操作"></a>C语言文件操作</h1><h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><p> <strong>fopen( )</strong> 函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE *fopen( const char * filename, const char * mode );</span><br></pre></td></tr></table></figure> <span id="more"></span><p>在这里，<strong>filename</strong> 是字符串，用来命名文件，访问模式 <strong>mode</strong> 的值可以是下列值中的一个：</p><table><thead><tr><th align="left">模式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">r</td><td align="left">打开一个已有的文本文件，允许读取文件。</td></tr><tr><td align="left">w</td><td align="left">打开一个文本文件，允许写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会从文件的开头写入内容。如果文件存在，则该会被截断为零长度，重新写入。</td></tr><tr><td align="left">a</td><td align="left">打开一个文本文件，以追加模式写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会在已有的文件内容中追加内容。</td></tr><tr><td align="left">r+</td><td align="left">打开一个文本文件，允许读写文件。</td></tr><tr><td align="left">w+</td><td align="left">打开一个文本文件，允许读写文件。如果文件已存在，则文件会被截断为零长度，如果文件不存在，则会创建一个新文件。</td></tr><tr><td align="left">a+</td><td align="left">打开一个文本文件，允许读写文件。如果文件不存在，则会创建一个新文件。读取会从文件的开头开始，写入则只能是追加模式。</td></tr></tbody></table><p>如果处理的是二进制文件，则需使用下面的访问模式来取代上面的访问模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;rb&quot;, &quot;wb&quot;, &quot;ab&quot;, &quot;rb+&quot;, &quot;r+b&quot;, &quot;wb+&quot;, &quot;w+b&quot;, &quot;ab+&quot;, &quot;a+b&quot;</span><br></pre></td></tr></table></figure><h2 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h2><p>为了关闭文件，请使用 fclose( ) 函数。函数的原型如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int fclose( FILE *fp );</span><br></pre></td></tr></table></figure><p>如果成功关闭文件，<strong>fclose( )</strong> 函数返回零，如果关闭文件时发生错误，函数返回 <strong>EOF</strong>。这个函数实际上，会清空缓冲区中的数据，关闭文件，并释放用于该文件的所有内存。EOF 是一个定义在头文件 <strong>stdio.h</strong> 中的常量。</p>]]></content>
      
      
      <categories>
          
          <category> 方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装指定版本minio</title>
      <link href="/2021/11/19/docker%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%ACminio/"/>
      <url>/2021/11/19/docker%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%ACminio/</url>
      
        <content type="html"><![CDATA[<h1 id="docker安装指定版本minio"><a href="#docker安装指定版本minio" class="headerlink" title="docker安装指定版本minio"></a><a href="https://www.cnblogs.com/jiqing9006/p/15272722.html">docker安装指定版本minio</a></h1><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/minio:RELEASE.2020-12-03T00-03-10Z</span><br></pre></td></tr></table></figure> <span id="more"></span><h3 id="启动，也要加上指定版本"><a href="#启动，也要加上指定版本" class="headerlink" title="启动，也要加上指定版本"></a>启动，也要加上指定版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9000:9000 --name minio -d --restart=always -e &quot;MINIO_ACCESS_KEY=admin&quot; -e &quot;MINIO_SECRET_KEY=admin123&quot; -v /opt/data:/data -v /opt/config:/root/.minio minio/minio:RELEASE.2020-12-03T00-03-10Z server /data</span><br></pre></td></tr></table></figure><p>node上传文件方法</p><p>安装npm插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save minio</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const Minio = require(&#x27;minio&#x27;)</span><br><span class="line">async index() &#123;</span><br><span class="line">const &#123; ctx &#125; = this;</span><br><span class="line">let file = ctx.request.files[0] // file包含了文件名，文件类型，大小，路径等信息，可以自己打印下看看</span><br><span class="line">//使用端点实例化minio客户端</span><br><span class="line">//和访问键，如下所示。</span><br><span class="line">    var minioClient = new Minio.Client(&#123;</span><br><span class="line">    endPoint: &#x27;101.200.87.232&#x27;,</span><br><span class="line">    port: 9000,</span><br><span class="line">    useSSL: false,</span><br><span class="line">    accessKey: &#x27;admin&#x27;,</span><br><span class="line">    secretKey: &#x27;admin123&#x27;</span><br><span class="line">    &#125;);</span><br><span class="line">    var metaData = &#123;</span><br><span class="line">    &#x27;Content-Type&#x27;: &#x27;application/octet-stream&#x27;,</span><br><span class="line">    &#x27;X-Amz-Meta-Testing&#x27;: 1234,</span><br><span class="line">    &#x27;example&#x27;: 5678</span><br><span class="line">    &#125;</span><br><span class="line">    minioClient.fPutObject(&#x27;test&#x27;, file.filename, file.filepath, metaData, function (err, etag) &#123;</span><br><span class="line">    if (err) return console.log(err)</span><br><span class="line">    console.log(&#x27;File uploaded successfully.&#x27;)</span><br><span class="line">    &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用egg操作minio，实现文件上传下载</title>
      <link href="/2021/11/19/%E4%BD%BF%E7%94%A8egg%E6%93%8D%E4%BD%9Cminio%EF%BC%8C%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
      <url>/2021/11/19/%E4%BD%BF%E7%94%A8egg%E6%93%8D%E4%BD%9Cminio%EF%BC%8C%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="使用egg操作minio，实现文件上传下载"><a href="#使用egg操作minio，实现文件上传下载" class="headerlink" title="使用egg操作minio，实现文件上传下载"></a>使用egg操作minio，实现文件上传下载</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const Minio = require(&#x27;minio&#x27;);//引用npm Minio包</span><br><span class="line">const bucket = &quot;test&quot;//使用的桶（test是公有的）（browse是私有的）</span><br><span class="line">//其中公有的能使用文件地址直接下载，私有的需要通过自己的下载接口</span><br><span class="line">const minioClient = new Minio.Client(&#123;//minio的参数</span><br><span class="line">    endPoint: &#x27;101.200.87.232&#x27;,</span><br><span class="line">    port: 9000,</span><br><span class="line">    useSSL: false,</span><br><span class="line">    accessKey: &#x27;账号&#x27;,</span><br><span class="line">    secretKey: &#x27;密码&#x27;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const metaData = &#123;//上传中的数据格式，根据文件类型，可能会有变化</span><br><span class="line">    &#x27;Content-Type&#x27;: &#x27;application/octet-stream&#x27;,</span><br><span class="line">    &#x27;X-Amz-Meta-Testing&#x27;: 1234,</span><br><span class="line">    example: 5678,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="上传代码"><a href="#上传代码" class="headerlink" title="上传代码"></a>上传代码</h3><p>上传方式是POST请求，数据使用file</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">index</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; ctx &#125; = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> file = ctx.request.files[<span class="number">0</span>]; <span class="comment">// file包含了文件名，文件类型，大小，路径等信息，可以自己打印下看看</span></span><br><span class="line">            <span class="keyword">const</span> params = ctx.query; <span class="comment">// file包含了文件名，文件类型，大小，路径等信息，可以自己打印下看看，由于编码问题，使用postman上传的文件名中的中文会被转换成乱码。但使用elelmentUI则不会。</span></span><br><span class="line">            params.filename = params.filename || file.filename</span><br><span class="line">            <span class="keyword">let</span> errmsg = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            minioClient.fPutObject(bucket, params.filename, file.filepath, metaData, <span class="function"><span class="keyword">function</span> (<span class="params">err, etag</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    errmsg = err.message;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (errmsg != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.error(errmsg);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.success(<span class="string">&#x27;http://101.200.87.232:9000/test/&#x27;</span> + params.filename);</span><br><span class="line">            <span class="comment">//返回给前端一个url，由于我的test仓库是公有的，访问此url，能直接下载或展示文件。</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="built_in">this</span>.error(error.message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="下载代码"><a href="#下载代码" class="headerlink" title="下载代码"></a>下载代码</h3><p>把桶设置成公有的，在上传接口中返回的url就是下载链接</p><p>下面是私有情况下的下载方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">indexget</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// minioClient.fGetObject(&#x27;test&#x27;, &#x27;111.png&#x27;, &#x27;D:\\222.png&#x27;, function (err, etag) &#123;</span></span><br><span class="line">        <span class="comment">//     if (err) &#123;</span></span><br><span class="line">        <span class="comment">//         return console.log(err);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     console.log(&#x27;done&#x27;);</span></span><br><span class="line">        <span class="comment">// &#125;);</span></span><br><span class="line">        <span class="comment">//fGetObject：会把文件保存在本地</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> &#123; ctx &#125; = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">const</span> params = ctx.query;<span class="comment">//接受下载文件在minio中的文件名</span></span><br><span class="line">        <span class="keyword">const</span> kkk = <span class="keyword">await</span> minioClient.getObject(bucket, params.filename)</span><br><span class="line">        <span class="comment">//此方法是官方提供，会返回，文件相关数据。</span></span><br><span class="line">        <span class="comment">//由于官方的方法是异步的，不能通过阻塞线程的方式等待此方法调用完毕后，返回文件。必须使用await</span></span><br><span class="line">        ctx.attachment(params.filename);<span class="comment">//下载的文件名</span></span><br><span class="line">        ctx.set(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/octet-stream&#x27;</span>);</span><br><span class="line">        ctx.body = kkk</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="另外上传文件出现问题-413-Request-Entity-Too-Large"><a href="#另外上传文件出现问题-413-Request-Entity-Too-Large" class="headerlink" title="另外上传文件出现问题 413 Request Entity Too Large"></a>另外上传文件出现问题 413 Request Entity Too Large</h3><p>这个是由于Nginx默认的request body为1M</p><blockquote><p>解决方案<br>找到自己主机的nginx.conf配置文件，打开<br>在http{}中加入 client_max_body_size 10m;<br>然后重启nginx</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> egg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中判断数组中是否包含某元素的方法</title>
      <link href="/2021/11/19/js%E4%B8%AD%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E4%B8%AD%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E6%9F%90%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2021/11/19/js%E4%B8%AD%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E4%B8%AD%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E6%9F%90%E5%85%83%E7%B4%A0%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="js中判断数组中是否包含某元素的方法"><a href="#js中判断数组中是否包含某元素的方法" class="headerlink" title="js中判断数组中是否包含某元素的方法"></a><a href="https://www.cnblogs.com/yunshangwuyou/p/10539090.html">js中判断数组中是否包含某元素的方法</a></h1><h3 id="方法一：array-indexOf-item-start-："><a href="#方法一：array-indexOf-item-start-：" class="headerlink" title="方法一：array.indexOf(item,start)："></a><strong>方法一：array.indexOf(item,start)：</strong></h3><p><strong>元素在数组中的位置,如果没与搜索到则返回 -1。</strong><br> <span id="more"></span></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>item</td><td>必须。查找的元素。</td></tr><tr><td>start</td><td>可选的整数参数。规定在数组中开始检索的位置。它的合法取值是 0 到 stringObject.length - 1。如省略该参数，则将从字符串的首字符开始检索。</td></tr></tbody></table><p>实际用法：if(arr.indexOf(某元素) &gt; -1){//则包含该元素}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class="line"></span><br><span class="line">var a = fruits.indexOf(&quot;Apple&quot;); // 2//以上输出结果意味着 &quot;Apple&quot; 元素位于数组中的第 3 个位置。</span><br></pre></td></tr></table></figure><p>　var fruits=[“Banana”,”Orange”,”Apple”,”Mango”,”Banana”,”Orange”,”Apple”];</p><p>　var a = fruits.indexOf(“Apple”,4); //6</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//以上输出结果意味在数组的第四个位置开始检索：</span><br></pre></td></tr></table></figure><p>　　注：string.indexOf()返回某个指定的字符串值在字符串中首次出现的位置。</p><p>1.该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 searchvalue。开始检索的位置在字符串的 fromindex 处或字符串的开头（没有指定 fromindex 时）。如果找到一个 searchvalue，则返回 searchvalue 的第一次出现的位置。</p><p>\2. stringObject 中的字符位置是从 0 开始的。</p><p>\3. 查找字符串最后出现的位置，使用 lastIndexOf() 方法。</p><p><strong>JavaScript Array filter() 方法有类似的检索功能：</strong></p><p>　　filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p><p>　　<strong>注意：</strong> filter() 不会对空数组进行检测。</p><p>　　<strong>注意：</strong> filter() 不会改变原始数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var ages = [32, 33, 16, 40];</span><br><span class="line">function checkAdult(age) &#123;</span><br><span class="line">    return age == 16;</span><br><span class="line">&#125;</span><br><span class="line">function myFunction() &#123;</span><br><span class="line">    ages.filter(checkAdult);</span><br><span class="line">  console.log(ages.filter(checkAdult))</span><br><span class="line">&#125;</span><br><span class="line">myFunction()</span><br><span class="line"></span><br><span class="line">//[16]</span><br><span class="line"></span><br><span class="line">var ages = [32, 33, 16, 40];</span><br><span class="line">function checkAdult(age) &#123;</span><br><span class="line">    return age &lt;= 14;</span><br><span class="line">&#125;</span><br><span class="line">function myFunction() &#123;</span><br><span class="line">    ages.filter(checkAdult);</span><br><span class="line">  console.log(ages.filter(checkAdult))</span><br><span class="line">&#125;</span><br><span class="line">myFunction()</span><br><span class="line">//[]</span><br></pre></td></tr></table></figure><h3 id="方法二：array-find"><a href="#方法二：array-find" class="headerlink" title="方法二：array.find()"></a><strong>方法二：array.find()</strong></h3><p>数组实例的find()用于找出第一个符合条件的数组元素。它的参数是一个回调函数，所有数组元素依次遍历该回调函数，直到找出第一个返回值为true的元素，然后返回该元素，否则返回undefined。</p><p>find() 方法返回通过测试（函数内判断）的数组的第一个元素的值。</p><p>find() 方法为数组中的每个元素都调用一次函数执行：</p><ul><li>当数组中的元素在测试条件时返回 <em>true</em> 时, find() 返回符合条件的元素，之后的值不会再调用执行函数。</li><li>如果没有符合条件的元素返回 undefined</li></ul><p><strong>注意:</strong> find() 对于空数组，函数是不会执行的。</p><p><strong>注意:</strong> find() 并没有改变数组的原始值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[1, 5, 10, 15].find(function(value, index, arr) &#123;</span><br><span class="line">return value &gt; 9;</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line">// 10</span><br><span class="line"></span><br><span class="line">//实际用法：</span><br><span class="line"></span><br><span class="line">arr.find(function(value) &#123;</span><br><span class="line"></span><br><span class="line">if(value === 要查找的值) &#123;</span><br><span class="line"></span><br><span class="line">//则包含该元素</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="方法三：array-findIndex"><a href="#方法三：array-findIndex" class="headerlink" title="方法三：array.findIndex()"></a><strong>方法三：array.findIndex()</strong></h3><p>array.findIndex()和array.find()十分类似，返回第一个符合条件的数组元素的位置，如果所有元素都不符合条件，则返回-1。<br>findIndex() 方法为数组中的每个元素都调用一次函数执行：</p><p>当数组中的元素在测试条件时返回 true 时, findIndex() 返回符合条件的元素的索引位置，之后的值不会再调用执行函数。<br>如果没有符合条件的元素返回 -1</p><p>注意: findIndex() 对于空数组，函数是不会执行的。<br>注意: findIndex() 并没有改变数组的原始值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var ages = [3, 10, 18, 20];</span><br><span class="line"> </span><br><span class="line">function checkAdult(age) &#123;</span><br><span class="line">    return age &gt;= 18;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function myFunction() &#123;</span><br><span class="line">    console.log(ages.findIndex(checkAdult)) ;</span><br><span class="line">&#125;</span><br><span class="line">myFunction()</span><br><span class="line"></span><br><span class="line">//2</span><br></pre></td></tr></table></figure><p>方法二和方法三，这两个方法都可以发现NaN，弥补了方法一IndexOf()的不足。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[NaN].2.dexOf(NaN) </span><br><span class="line">//-1</span><br><span class="line"></span><br><span class="line">[Na3..findIndex(y =&gt; Object.is(NaN, y))</span><br><span class="line">// 0</span><br></pre></td></tr></table></figure><h3 id="方法四：for-循环"><a href="#方法四：for-循环" class="headerlink" title="方法四：for()循环"></a><strong>方法四：for()循环</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">遍历数组，然后 if 判断</span><br><span class="line"></span><br><span class="line">var arr = [1, 5, 10, 15];</span><br><span class="line"></span><br><span class="line">//传统for</span><br><span class="line"></span><br><span class="line">for(let i=0; i&lt;arr.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">if(arr[i] === 查找值) &#123;</span><br><span class="line"></span><br><span class="line">//则包含该元素</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// for...of</span><br><span class="line"></span><br><span class="line">for(v of arr) &#123;</span><br><span class="line"></span><br><span class="line">if(v === 查找值) &#123;</span><br><span class="line"></span><br><span class="line">//则包含该元素</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//forEach</span><br><span class="line"></span><br><span class="line">arr.forEach(v=&gt;&#123;</span><br><span class="line"></span><br><span class="line">if(v === 查找值) &#123;</span><br><span class="line"></span><br><span class="line">//则包含该元素</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="方法五：就是使用jquery的inArray方法"><a href="#方法五：就是使用jquery的inArray方法" class="headerlink" title="方法五：就是使用jquery的inArray方法"></a><strong>方法五：就是使用jquery的inArray方法</strong></h3><p><strong>该方法返回元素在数组中的下标，如果不存在与数组中，那么返回－１，代码如下所示：</strong></p><p>/**<br>* 使用jquery的inArray方法判断元素是否存在于数组中<br>* @param {Object} arr 数组<br>* @param {Object} value 元素值<br>*/</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function isInArray2(arr,value)&#123;</span><br><span class="line">var index = $.inArray(value,arr);</span><br><span class="line">if(index &gt;= 0)&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法六、include-方法："><a href="#方法六、include-方法：" class="headerlink" title="方法六、include()方法："></a><strong>方法六、include()方法：</strong></h3><p>arr.includes(searchElement)方法用来判断一个数组是否包含一个指定的值，如果是返回 true，否则false。searchElement:必须。需要查找的元素值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let site = [&#x27;runoob&#x27;, &#x27;google&#x27;, &#x27;taobao&#x27;];</span><br><span class="line"> </span><br><span class="line">site.includes(&#x27;runoob&#x27;); </span><br><span class="line">// true </span><br><span class="line"> </span><br><span class="line">site.includes(&#x27;baidu&#x27;); </span><br><span class="line">// false</span><br></pre></td></tr></table></figure><table><thead><tr><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>[1, 2, 3].includes(2);</td><td>//true</td></tr><tr><td>[1, 2, 3].includes(4);</td><td>// false</td></tr><tr><td>[1, 2, 3].includes(3, 3);</td><td>// false</td></tr><tr><td>[1, 2, 3].includes(3, -1);</td><td>//true</td></tr><tr><td>[1, 2, NaN].includes(NaN);</td><td>//true</td></tr></tbody></table><p>arr.includes(searchElement, fromIndex).fromIndex:可选。从该索引处开始查找 searchElement。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索。默认为 0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var arr = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;];</span><br><span class="line">注意：如果fromIndex 大于等于数组长度 ，则返回 false 。该数组不会被搜索 </span><br><span class="line">arr.includes(&#x27;c&#x27;, 3);   //false</span><br><span class="line">arr.includes(&#x27;c&#x27;, 100); // false</span><br><span class="line"></span><br><span class="line">注意：如果 fromIndex 为负值，计算出的索引将作为开始搜索searchElement的位置。如果计算出的索引小于 0，则整个数组都会被搜索。</span><br><span class="line">// 数组长度是3</span><br><span class="line">// fromIndex 是 -100</span><br><span class="line">// computed index 是 3 + (-100) = -97</span><br><span class="line">arr.includes(&#x27;a&#x27;, -100); // true</span><br><span class="line">arr.includes(&#x27;b&#x27;, -100); // true</span><br><span class="line">arr.includes(&#x27;c&#x27;, -100); // true</span><br></pre></td></tr></table></figure><h3 id="方法七-Array-some-方法，类似于filter"><a href="#方法七-Array-some-方法，类似于filter" class="headerlink" title="方法七.Array some() 方法，类似于filter()"></a><strong>方法七.Array some() 方法，类似于filter()</strong></h3><p>some() 方法用于检测数组中的元素是否满足指定条件（函数提供）。</p><p>some() 方法会依次执行数组的每个元素：</p><p>如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。<br>如果没有满足条件的元素，则返回false。<br>注意： some() 不会对空数组进行检测。</p><p>注意： some() 不会改变原始数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var ages = [3, 10, 18, 20];</span><br><span class="line">function checkAdult(age) &#123;</span><br><span class="line">    return age == 18;</span><br><span class="line">&#125;</span><br><span class="line">function myFunction() &#123;</span><br><span class="line">    console.log(ages.some(checkAdult));</span><br><span class="line">&#125;</span><br><span class="line">myFunction() </span><br><span class="line"></span><br><span class="line">//true</span><br></pre></td></tr></table></figure><h3 id="方法八、Jquery的-each"><a href="#方法八、Jquery的-each" class="headerlink" title="方法八、Jquery的$.each()"></a>方法八、Jquery的$.each()</h3><p><strong>each() 方法为每个匹配元素规定要运行的函数。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var anArray = [&#x27;one&#x27;,&#x27;two&#x27;,&#x27;three&#x27;];</span><br><span class="line">      $.each(anArray,function(n,value)&#123;</span><br><span class="line">          if(value==&quot;one&quot;)&#123;</span><br><span class="line">           console.log(&quot;one存在于数组中&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>//one存在于数组中</p>]]></content>
      
      
      <categories>
          
          <category> 方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rabbitmq RPC模式实例</title>
      <link href="/2021/11/19/rabbitmq%20RPC%E6%A8%A1%E5%BC%8F%E5%AE%9E%E4%BE%8B/"/>
      <url>/2021/11/19/rabbitmq%20RPC%E6%A8%A1%E5%BC%8F%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="rabbitmq-RPC模式实例"><a href="#rabbitmq-RPC模式实例" class="headerlink" title="rabbitmq RPC模式实例"></a>rabbitmq RPC模式实例</h1><p>rabbitmq RPC模式实例</p><p>（由生产者发送斐波那契数列的个数，消费者回复对应个数的斐波那契数列的数字）</p> <span id="more"></span><p>server.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;log&quot;</span></span><br><span class="line">        <span class="string">&quot;strconv&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;github.com/streadway/amqp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                log.Fatalf(<span class="string">&quot;%s: %s&quot;</span>, msg, err)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        conn, err := amqp.Dial(<span class="string">&quot;amqp://guest:guest@localhost:5672/&quot;</span>)</span><br><span class="line">        failOnError(err, <span class="string">&quot;无法连接到RabbitMQ&quot;</span>)</span><br><span class="line">        <span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">        ch, err := conn.Channel()</span><br><span class="line">        failOnError(err, <span class="string">&quot;无法打开频道&quot;</span>)</span><br><span class="line">        <span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line">        q, err := ch.QueueDeclare(</span><br><span class="line">                <span class="string">&quot;rpc_queue&quot;</span>, <span class="comment">// name</span></span><br><span class="line">                <span class="literal">false</span>,       <span class="comment">// durable</span></span><br><span class="line">                <span class="literal">false</span>,       <span class="comment">// delete when unused</span></span><br><span class="line">                <span class="literal">false</span>,       <span class="comment">// exclusive</span></span><br><span class="line">                <span class="literal">false</span>,       <span class="comment">// no-wait</span></span><br><span class="line">                <span class="literal">nil</span>,         <span class="comment">// arguments</span></span><br><span class="line">        )</span><br><span class="line">        failOnError(err, <span class="string">&quot;未能声明队列&quot;</span>)</span><br><span class="line"></span><br><span class="line">        err = ch.Qos(</span><br><span class="line">                <span class="number">1</span>,     <span class="comment">// prefetch count</span></span><br><span class="line">                <span class="number">0</span>,     <span class="comment">// prefetch size</span></span><br><span class="line">                <span class="literal">false</span>, <span class="comment">// global</span></span><br><span class="line">        )</span><br><span class="line">        failOnError(err, <span class="string">&quot;无法设置QoS&quot;</span>)</span><br><span class="line"></span><br><span class="line">        msgs, err := ch.Consume(</span><br><span class="line">                q.Name, <span class="comment">// queue</span></span><br><span class="line">                <span class="string">&quot;&quot;</span>,     <span class="comment">// consumer</span></span><br><span class="line">                <span class="literal">false</span>,  <span class="comment">// auto-ack</span></span><br><span class="line">                <span class="literal">false</span>,  <span class="comment">// exclusive</span></span><br><span class="line">                <span class="literal">false</span>,  <span class="comment">// no-local</span></span><br><span class="line">                <span class="literal">false</span>,  <span class="comment">// no-wait</span></span><br><span class="line">                <span class="literal">nil</span>,    <span class="comment">// args</span></span><br><span class="line">        )</span><br><span class="line">        failOnError(err, <span class="string">&quot;未能注册消费者&quot;</span>)</span><br><span class="line"></span><br><span class="line">        forever := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">                <span class="keyword">for</span> d := <span class="keyword">range</span> msgs &#123;</span><br><span class="line">                        n, err := strconv.Atoi(<span class="keyword">string</span>(d.Body))</span><br><span class="line">                        failOnError(err, <span class="string">&quot;Failed to convert body to integer&quot;</span>)</span><br><span class="line"></span><br><span class="line">                        log.Printf(<span class="string">&quot; [.] fib(%d)&quot;</span>, n)</span><br><span class="line">                        response := fib(n)</span><br><span class="line"></span><br><span class="line">                        err = ch.Publish(</span><br><span class="line">                                <span class="string">&quot;&quot;</span>,        <span class="comment">// exchange</span></span><br><span class="line">                                d.ReplyTo, <span class="comment">// routing key</span></span><br><span class="line">                                <span class="literal">false</span>,     <span class="comment">// mandatory</span></span><br><span class="line">                                <span class="literal">false</span>,     <span class="comment">// immediate</span></span><br><span class="line">                                amqp.Publishing&#123;</span><br><span class="line">                                        ContentType:   <span class="string">&quot;text/plain&quot;</span>,</span><br><span class="line">                                        CorrelationId: d.CorrelationId,</span><br><span class="line">                                        Body:          []<span class="keyword">byte</span>(strconv.Itoa(response)),</span><br><span class="line">                                &#125;)</span><br><span class="line">                        failOnError(err, <span class="string">&quot;未能发布消息&quot;</span>)</span><br><span class="line"></span><br><span class="line">                        d.Ack(<span class="literal">false</span>)</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;()</span><br><span class="line"></span><br><span class="line">        log.Printf(<span class="string">&quot; [*] 正在等待RPC请求&quot;</span>)</span><br><span class="line">        &lt;-forever</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;log&quot;</span></span><br><span class="line">        <span class="string">&quot;math/rand&quot;</span></span><br><span class="line">        <span class="string">&quot;os&quot;</span></span><br><span class="line">        <span class="string">&quot;strconv&quot;</span></span><br><span class="line">        <span class="string">&quot;strings&quot;</span></span><br><span class="line">        <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;github.com/streadway/amqp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">failOnError</span><span class="params">(err error, msg <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                log.Fatalf(<span class="string">&quot;%s: %s&quot;</span>, msg, err)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randomString</span><span class="params">(l <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">        bytes := <span class="built_in">make</span>([]<span class="keyword">byte</span>, l)</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; l; i++ &#123;</span><br><span class="line">                bytes[i] = <span class="keyword">byte</span>(randInt(<span class="number">65</span>, <span class="number">90</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">string</span>(bytes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randInt</span><span class="params">(min <span class="keyword">int</span>, max <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> min + rand.Intn(max-min)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacciRPC</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="params">(res <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">        conn, err := amqp.Dial(<span class="string">&quot;amqp://guest:guest@localhost:5672/&quot;</span>)</span><br><span class="line">        failOnError(err, <span class="string">&quot;无法连接到RabbitMQ&quot;</span>)</span><br><span class="line">        <span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">        ch, err := conn.Channel()</span><br><span class="line">        failOnError(err, <span class="string">&quot;无法打开通道&quot;</span>)</span><br><span class="line">        <span class="keyword">defer</span> ch.Close()</span><br><span class="line"></span><br><span class="line">        q, err := ch.QueueDeclare(</span><br><span class="line">                <span class="string">&quot;&quot;</span>,    <span class="comment">// name</span></span><br><span class="line">                <span class="literal">false</span>, <span class="comment">// durable</span></span><br><span class="line">                <span class="literal">false</span>, <span class="comment">// delete when unused</span></span><br><span class="line">                <span class="literal">true</span>,  <span class="comment">// exclusive</span></span><br><span class="line">                <span class="literal">false</span>, <span class="comment">// noWait</span></span><br><span class="line">                <span class="literal">nil</span>,   <span class="comment">// arguments</span></span><br><span class="line">        )</span><br><span class="line">        failOnError(err, <span class="string">&quot;未能声明队列&quot;</span>)</span><br><span class="line"></span><br><span class="line">        msgs, err := ch.Consume(</span><br><span class="line">                q.Name, <span class="comment">// queue</span></span><br><span class="line">                <span class="string">&quot;&quot;</span>,     <span class="comment">// consumer</span></span><br><span class="line">                <span class="literal">true</span>,   <span class="comment">// auto-ack</span></span><br><span class="line">                <span class="literal">false</span>,  <span class="comment">// exclusive</span></span><br><span class="line">                <span class="literal">false</span>,  <span class="comment">// no-local</span></span><br><span class="line">                <span class="literal">false</span>,  <span class="comment">// no-wait</span></span><br><span class="line">                <span class="literal">nil</span>,    <span class="comment">// args</span></span><br><span class="line">        )</span><br><span class="line">        failOnError(err, <span class="string">&quot;未能注册消费者&quot;</span>)</span><br><span class="line"></span><br><span class="line">        corrId := randomString(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">        err = ch.Publish(</span><br><span class="line">                <span class="string">&quot;&quot;</span>,          <span class="comment">// exchange</span></span><br><span class="line">                <span class="string">&quot;rpc_queue&quot;</span>, <span class="comment">// routing key</span></span><br><span class="line">                <span class="literal">false</span>,       <span class="comment">// mandatory</span></span><br><span class="line">                <span class="literal">false</span>,       <span class="comment">// immediate</span></span><br><span class="line">                amqp.Publishing&#123;</span><br><span class="line">                        ContentType:   <span class="string">&quot;text/plain&quot;</span>,</span><br><span class="line">                        CorrelationId: corrId,</span><br><span class="line">                        ReplyTo:       q.Name,</span><br><span class="line">                        Body:          []<span class="keyword">byte</span>(strconv.Itoa(n)),</span><br><span class="line">                &#125;)</span><br><span class="line">        failOnError(err, <span class="string">&quot;未能发布消息&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> d := <span class="keyword">range</span> msgs &#123;</span><br><span class="line">                <span class="keyword">if</span> corrId == d.CorrelationId &#123;</span><br><span class="line">                        res, err = strconv.Atoi(<span class="keyword">string</span>(d.Body))</span><br><span class="line">                        failOnError(err, <span class="string">&quot;无法将正文转换为整数&quot;</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        rand.Seed(time.Now().UTC().UnixNano())</span><br><span class="line"></span><br><span class="line">        n := bodyFrom(os.Args)</span><br><span class="line"></span><br><span class="line">        log.Printf(<span class="string">&quot; [x] Requesting fib(%d)&quot;</span>, n)</span><br><span class="line">        res, err := fibonacciRPC(n)</span><br><span class="line">        failOnError(err, <span class="string">&quot;无法处理RPC请求&quot;</span>)</span><br><span class="line"></span><br><span class="line">        log.Printf(<span class="string">&quot; [.] Got %d&quot;</span>, res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bodyFrom</span><span class="params">(args []<span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> s <span class="keyword">string</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(args) &lt; <span class="number">2</span>) || os.Args[<span class="number">1</span>] == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">                s = <span class="string">&quot;30&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                s = strings.Join(args[<span class="number">1</span>:], <span class="string">&quot; &quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        n, err := strconv.Atoi(s)</span><br><span class="line">        failOnError(err, <span class="string">&quot;无法将arg转换为整数&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>egg npm安装列表</title>
      <link href="/2021/11/19/egg%20npm%E5%AE%89%E8%A3%85%E5%88%97%E8%A1%A8/"/>
      <url>/2021/11/19/egg%20npm%E5%AE%89%E8%A3%85%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="egg-npm安装列表"><a href="#egg-npm安装列表" class="headerlink" title="egg npm安装列表"></a>egg npm安装列表</h1><h2 id="mongoose"><a href="#mongoose" class="headerlink" title="mongoose"></a>mongoose</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install mongoose</span><br></pre></td></tr></table></figure> <span id="more"></span><p>plugin.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mongoose: &#123;</span><br><span class="line">    enable: true,</span><br><span class="line">    package: &#x27;egg-mongoose&#x27;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>config.default.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//mongodb配置</span><br><span class="line">  config.mongoose = &#123;</span><br><span class="line">    url:</span><br><span class="line">      &quot;mongodb://127.0.0.1:27017/attendance&quot;,</span><br><span class="line">    options: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i egg-cors --save</span><br></pre></td></tr></table></figure><h1 id="csprng"><a href="#csprng" class="headerlink" title="csprng"></a>csprng</h1><p>生成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install csprng</span><br></pre></td></tr></table></figure><h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><p>实现md5加密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i crypto --save</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> egg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/18/hello-world/"/>
      <url>/2021/11/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br> <span id="more"></span></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
